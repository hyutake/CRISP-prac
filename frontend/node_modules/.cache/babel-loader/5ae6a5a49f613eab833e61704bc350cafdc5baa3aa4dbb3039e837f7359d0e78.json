{"ast":null,"code":"var _s2 = $RefreshSig$();\nimport axios from \"axios\";\nimport { taskActions } from \"./task-slice\";\nimport { useDispatch } from \"react-redux\";\n\n// export const fetchTasks = () => {\n//   return async (dispatch) => {\n//     try {\n//       const response = await axios.get(\"http://localhost:3001/tasks\");\n//       if (response.status === 200) {\n//         const tasks = response.data;\n//         console.log(\"fetching\" + tasks);\n//         //dispatch(taskActions.setTask(tasks));\n\n//         return tasks;\n//       } else {\n//         throw new Error(\"Failed to fetch tasks from the API.\");\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n// };\n\n// export const setTasks = () => {\n//   return async (dispatch) => {\n//       tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n//       while (state.tasks != action.payload){\n//         state.tasks = action.payload;\n//     }\n//   }\n// }\n\n// export const setTasks = (state, tasks) => {\n//   return (dispatch) => {\n//     console.log(\"lol\");\n//     const sortedTasks = tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n//     //dispatch(taskActions.setTask(sortedTasks));\n//     state.tasks = sortedTasks;\n//   };\n// };\n\n// import axios from \"axios\";\n// import { taskActions } from \"./task-slice\";\n// import { useDispatch } from \"react-redux\";\n\nexport const fetchTasks = () => {\n  var _s = $RefreshSig$();\n  return _s(async tasks => {\n    _s();\n    try {\n      const response = await axios.get(\"http://localhost:3001/tasks\");\n      if (response.status === 200) {\n        const dispatch = useDispatch();\n        const tasks = response.data;\n        console.log(\"fetching\");\n        dispatch(taskActions.setTask(tasks));\n        return tasks;\n      } else {\n        throw new Error(\"Failed to fetch tasks from the API.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n    return [useDispatch];\n  });\n};\nexport const useResetTasks = () => {\n  _s2();\n  const dispatch = useDispatch();\n  fetchTasks().then(tasks => {\n    // Handle the fetched tasks\n    dispatch(taskActions.setTask(tasks));\n    console.log(tasks);\n  }).catch(error => {\n    // Handle error if any\n    console.log(error);\n  });\n};\n_s2(useResetTasks, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["axios","taskActions","useDispatch","fetchTasks","_s","$RefreshSig$","tasks","response","get","status","dispatch","data","console","log","setTask","Error","error","useResetTasks","_s2","then","catch"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/store/useFetchTasks.js"],"sourcesContent":["import axios from \"axios\";\nimport {taskActions} from \"./task-slice\";\nimport { useDispatch } from \"react-redux\";\n\n// export const fetchTasks = () => {\n//   return async (dispatch) => {\n//     try {\n//       const response = await axios.get(\"http://localhost:3001/tasks\");\n//       if (response.status === 200) {\n//         const tasks = response.data;\n//         console.log(\"fetching\" + tasks);\n//         //dispatch(taskActions.setTask(tasks));\n        \n//         return tasks;\n//       } else {\n//         throw new Error(\"Failed to fetch tasks from the API.\");\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n// };\n\n// export const setTasks = () => {\n//   return async (dispatch) => {\n//       tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n//       while (state.tasks != action.payload){\n//         state.tasks = action.payload;\n//     }\n//   }\n// }\n\n\n// export const setTasks = (state, tasks) => {\n//   return (dispatch) => {\n//     console.log(\"lol\");\n//     const sortedTasks = tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n//     //dispatch(taskActions.setTask(sortedTasks));\n//     state.tasks = sortedTasks;\n//   };\n// };\n\n\n// import axios from \"axios\";\n// import { taskActions } from \"./task-slice\";\n// import { useDispatch } from \"react-redux\";\n\nexport const fetchTasks = () => {\n  return async (tasks) => {\n    try {\n      const response = await axios.get(\"http://localhost:3001/tasks\");\n      if (response.status === 200) {\n        const dispatch = useDispatch();\n        const tasks = response.data;\n        console.log(\"fetching\");\n        dispatch(taskActions.setTask(tasks));\n        return tasks;\n      } else {\n        throw new Error(\"Failed to fetch tasks from the API.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n\nexport const useResetTasks = () => {\n  const dispatch = useDispatch();\n  (fetchTasks())\n  .then((tasks) => {\n    // Handle the fetched tasks\n    dispatch(taskActions.setTask(tasks));\n    console.log(tasks);\n  })\n  .catch((error) => {\n    // Handle error if any\n    console.log(error);\n  });\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,WAAW,QAAO,cAAc;AACxC,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAC9B,OAAAD,EAAA,CAAO,MAAOE,KAAK,IAAK;IAAAF,EAAA;IACtB,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,6BAA6B,CAAC;MAC/D,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;QAC9B,MAAMI,KAAK,GAAGC,QAAQ,CAACI,IAAI;QAC3BC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;QACvBH,QAAQ,CAACT,WAAW,CAACa,OAAO,CAACR,KAAK,CAAC,CAAC;QACpC,OAAOA,KAAK;MACd,CAAC,MAAM;QACL,MAAM,IAAIS,KAAK,CAAC,qCAAqC,CAAC;MACxD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACpB;EACF,CAAC;IAAA,QAXsBd,WAAW;EAAA;AAYpC,CAAC;AAGD,OAAO,MAAMe,aAAa,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACjC,MAAMR,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC7BC,UAAU,CAAC,CAAC,CACZgB,IAAI,CAAEb,KAAK,IAAK;IACf;IACAI,QAAQ,CAACT,WAAW,CAACa,OAAO,CAACR,KAAK,CAAC,CAAC;IACpCM,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;EACpB,CAAC,CAAC,CACDc,KAAK,CAAEJ,KAAK,IAAK;IAChB;IACAJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;EACpB,CAAC,CAAC;AACJ,CAAC;AAAAE,GAAA,CAZYD,aAAa;EAAA,QACPf,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}