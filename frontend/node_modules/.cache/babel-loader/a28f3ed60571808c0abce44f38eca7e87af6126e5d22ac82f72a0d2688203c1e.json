{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react\";\n\n/* \n    tasks: array of task objects -> { title:___, desc:___, deadline:___ }, 'title' & 'desc' are Strings, 'deadline' is a Date object\n*/\n\nconst initialTaskState = {\n  tasks: []\n  //quantity: 0,\n};\n\nconst taskSlice = createSlice({\n  name: \"task\",\n  initialState: initialTaskState,\n  reducers: {\n    addTask(state, action) {\n      // action will pass an entire task object\n      const task = action.payload;\n      console.log(\"From task-slice addTask\");\n      console.log(task);\n      axios.post(\"http://localhost:3001/tasks\", {\n        title: task.title,\n        description: task.description,\n        deadline: task.deadline\n      }).then(response => {\n        // Handle the successful response\n        const createdTask = response.data;\n        console.log(createdTask);\n        // Add the created task to the state\n        //   state.tasks = state.tasks.map((task) => ({ ...task })); // Create a copy of each task\n        state.tasks.push(createdTask); // Append the createdTask object\n        // Trigger a page refresh\n        //window.location.reload();\n      }).catch(error => {\n        // Handle any errors\n        console.log(error.message);\n      });\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    },\n    removeTask(state, action) {\n      // action will pass the id of a task\n      const id = action.payload;\n\n      // double confirm deletion\n      const proceed = window.confirm(\"Delete task?\");\n      if (proceed) {\n        state.tasks = state.tasks.filter(task => task._id !== id);\n        axios.delete(`http://localhost:3001/tasks/${id}`);\n      }\n    },\n    editTask(state, action) {\n      // action will pass the edited task\n      console.log(action.payload);\n      const {\n        id,\n        title,\n        description,\n        deadline,\n        completed\n      } = action.payload;\n\n      //Make the PUT request to update the task on the backend\n      axios.put(`http://localhost:3001/tasks/${id}`, {\n        title,\n        description,\n        deadline,\n        completed\n      });\n      // .then((response) => {\n      //   // Handle the successful response\n      //   const updatedTask = response.data;\n      //   //window.location.reload();\n\n      //  Update the task in the state with the updated values\n      const updatedTasks = state.tasks.map(task => {\n        if (task.id === id) {\n          return action.payload;\n        }\n        return task;\n      });\n      console.log(state);\n      //this.setTask(state, updatedTasks);\n      //const dispatch = useDispatch();\n      //dispatch(taskActions.setTask(updatedTasks));\n      //   return {\n      // \t...state,\n      // \ttasks: updatedTasks,\n      //   };\n\n      // });\n      //     })\n      //     .catch((error) => {\n      //       // Handle any errors\n      //       console.log(error.message);\n      //     });\n    },\n\n    setTask(state, action) {\n      console.log(action.payload);\n      state.tasks = action.payload;\n    }\n  }\n});\nexport const taskActions = taskSlice.actions;\nexport default taskSlice;","map":{"version":3,"names":["createSlice","axios","useDispatch","initialTaskState","tasks","taskSlice","name","initialState","reducers","addTask","state","action","task","payload","console","log","post","title","description","deadline","then","response","createdTask","data","push","catch","error","message","sort","a","b","Date","removeTask","id","proceed","window","confirm","filter","_id","delete","editTask","completed","put","updatedTasks","map","setTask","taskActions","actions"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/store/task-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react\";\n\n/* \n    tasks: array of task objects -> { title:___, desc:___, deadline:___ }, 'title' & 'desc' are Strings, 'deadline' is a Date object\n*/\n\nconst initialTaskState = {\n  tasks: [],\n  //quantity: 0,\n};\n\nconst taskSlice = createSlice({\n\t\n  name: \"task\",\n  initialState: initialTaskState,\n  reducers: {\n    addTask(state, action) {\n      // action will pass an entire task object\n      const task = action.payload;\n      console.log(\"From task-slice addTask\");\n      console.log(task);\n\n      axios\n        .post(\"http://localhost:3001/tasks\", {\n          title: task.title,\n          description: task.description,\n          deadline: task.deadline,\n        })\n        .then((response) => {\n          // Handle the successful response\n          const createdTask = response.data;\n          console.log(createdTask);\n          // Add the created task to the state\n          //   state.tasks = state.tasks.map((task) => ({ ...task })); // Create a copy of each task\n        state.tasks.push(createdTask); // Append the createdTask object\n          // Trigger a page refresh\n          //window.location.reload();\n        })\n        .catch((error) => {\n          // Handle any errors\n          console.log(error.message);\n        });\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    },\n    removeTask(state, action) {\n      // action will pass the id of a task\n      const id = action.payload;\n\n      // double confirm deletion\n      const proceed = window.confirm(\"Delete task?\");\n\n      if (proceed) {\n        state.tasks = state.tasks.filter((task) => task._id !== id);\n        axios.delete(`http://localhost:3001/tasks/${id}`);\n      }\n    },\n    editTask(state, action) {\n\t\t\n      // action will pass the edited task\n      console.log(action.payload);\n      const { id, title, description, deadline, completed } = action.payload;\n\t\n      //Make the PUT request to update the task on the backend\n      axios.put(`http://localhost:3001/tasks/${id}`, {\n        title,\n        description,\n        deadline,\n        completed,\n      });\n      // .then((response) => {\n      //   // Handle the successful response\n      //   const updatedTask = response.data;\n      //   //window.location.reload();\n\n      //  Update the task in the state with the updated values\n      const updatedTasks = state.tasks.map((task) => {\n        if (task.id === id) {\n          return action.payload;\n        }\n        return task;\n      });\n\t  console.log(state);\n\t  //this.setTask(state, updatedTasks);\n\t  //const dispatch = useDispatch();\n\t  //dispatch(taskActions.setTask(updatedTasks));\n      //   return {\n      // \t...state,\n      // \ttasks: updatedTasks,\n      //   };\n\n      // });\n      //     })\n      //     .catch((error) => {\n      //       // Handle any errors\n      //       console.log(error.message);\n      //     });\n    },\n    setTask(state, action) {\n      console.log(action.payload);\n      state.tasks = action.payload;\n    },\n  },\n});\n\nexport const taskActions = taskSlice.actions;\nexport default taskSlice;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,OAAO;;AAEnC;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE;EACP;AACF,CAAC;;AAED,MAAMC,SAAS,GAAGL,WAAW,CAAC;EAE5BM,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEJ,gBAAgB;EAC9BK,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACrB;MACA,MAAMC,IAAI,GAAGD,MAAM,CAACE,OAAO;MAC3BC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtCD,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MAEjBX,KAAK,CACFe,IAAI,CAAC,6BAA6B,EAAE;QACnCC,KAAK,EAAEL,IAAI,CAACK,KAAK;QACjBC,WAAW,EAAEN,IAAI,CAACM,WAAW;QAC7BC,QAAQ,EAAEP,IAAI,CAACO;MACjB,CAAC,CAAC,CACDC,IAAI,CAAEC,QAAQ,IAAK;QAClB;QACA,MAAMC,WAAW,GAAGD,QAAQ,CAACE,IAAI;QACjCT,OAAO,CAACC,GAAG,CAACO,WAAW,CAAC;QACxB;QACA;QACFZ,KAAK,CAACN,KAAK,CAACoB,IAAI,CAACF,WAAW,CAAC,CAAC,CAAC;QAC7B;QACA;MACF,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;QAChB;QACAZ,OAAO,CAACC,GAAG,CAACW,KAAK,CAACC,OAAO,CAAC;MAC5B,CAAC,CAAC;MACJjB,KAAK,CAACN,KAAK,CAACwB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACV,QAAQ,CAAC,GAAG,IAAIY,IAAI,CAACD,CAAC,CAACX,QAAQ,CAAC,CAAC;IACzE,CAAC;IACDa,UAAUA,CAACtB,KAAK,EAAEC,MAAM,EAAE;MACxB;MACA,MAAMsB,EAAE,GAAGtB,MAAM,CAACE,OAAO;;MAEzB;MACA,MAAMqB,OAAO,GAAGC,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC;MAE9C,IAAIF,OAAO,EAAE;QACXxB,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACiC,MAAM,CAAEzB,IAAI,IAAKA,IAAI,CAAC0B,GAAG,KAAKL,EAAE,CAAC;QAC3DhC,KAAK,CAACsC,MAAM,CAAE,+BAA8BN,EAAG,EAAC,CAAC;MACnD;IACF,CAAC;IACDO,QAAQA,CAAC9B,KAAK,EAAEC,MAAM,EAAE;MAEtB;MACAG,OAAO,CAACC,GAAG,CAACJ,MAAM,CAACE,OAAO,CAAC;MAC3B,MAAM;QAAEoB,EAAE;QAAEhB,KAAK;QAAEC,WAAW;QAAEC,QAAQ;QAAEsB;MAAU,CAAC,GAAG9B,MAAM,CAACE,OAAO;;MAEtE;MACAZ,KAAK,CAACyC,GAAG,CAAE,+BAA8BT,EAAG,EAAC,EAAE;QAC7ChB,KAAK;QACLC,WAAW;QACXC,QAAQ;QACRsB;MACF,CAAC,CAAC;MACF;MACA;MACA;MACA;;MAEA;MACA,MAAME,YAAY,GAAGjC,KAAK,CAACN,KAAK,CAACwC,GAAG,CAAEhC,IAAI,IAAK;QAC7C,IAAIA,IAAI,CAACqB,EAAE,KAAKA,EAAE,EAAE;UAClB,OAAOtB,MAAM,CAACE,OAAO;QACvB;QACA,OAAOD,IAAI;MACb,CAAC,CAAC;MACLE,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;MAClB;MACA;MACA;MACG;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC;;IACDmC,OAAOA,CAACnC,KAAK,EAAEC,MAAM,EAAE;MACrBG,OAAO,CAACC,GAAG,CAACJ,MAAM,CAACE,OAAO,CAAC;MAC3BH,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACE,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMiC,WAAW,GAAGzC,SAAS,CAAC0C,OAAO;AAC5C,eAAe1C,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}