{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// to remove later\nconst DUMMY_TASKS = [{\n  id: \"t1\",\n  title: \"Laundry\",\n  desc: \"Do laundry\",\n  deadline: \"2023-05-27\"\n}, {\n  id: \"t2\",\n  title: \"Workout\",\n  desc: \"Go to the gym\",\n  deadline: \"2023-05-29\"\n}, {\n  id: \"t3\",\n  title: \"Lorem Ipsum\",\n  desc: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam tempus eros fermentum arcu eleifend porttitor. Ut accumsan dui at maximus rutrum. Quisque tristique maximus pretium. Ut tristique a diam ut luctus. Donec auctor, ante a dictum hendrerit, enim massa pretium massa, vel sagittis diam ligula sed nibh. Donec efficitur turpis sed dolor imperdiet blandit. Vivamus imperdiet elit et felis faucibus mollis. Suspendisse mollis dolor ornare lacus faucibus semper. Proin tempor enim nisl. Curabitur elementum, justo sit amet suscipit tincidunt, sapien eros fringilla sapien, vitae pharetra nunc ipsum eu odio. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla pulvinar venenatis erat, nec vulputate tellus.\",\n  deadline: \"2023-06-22\"\n}];\n/* \n    tasks: array of task objects -> { title:___, desc:___, deadline:___ }, 'title' & 'desc' are Strings, 'deadline' is a Date object\n*/\nconst initialTaskState = {\n  tasks: []\n  //quantity: 0,\n};\n\nconst taskSlice = createSlice({\n  name: \"task\",\n  initialState: initialTaskState,\n  reducers: {\n    addTask(state, action) {\n      // action will pass an entire task object\n      const task = action.payload;\n      axios.post(\"/tasks\", newTask).then(response => {\n        // Handle the successful response\n        const createdTask = response.data;\n        // Add the created task to the state\n        state.tasks.push(createdTask);\n      }).catch(error => {\n        // Handle any errors\n        console.log(error.message);\n      });\n      state.tasks.push({\n        id: \"t\" + Math.random().toString(),\n        title: task.title,\n        desc: task.desc,\n        deadline: task.deadline\n      });\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n      state.quantity++;\n    },\n    removeTask(state, action) {\n      // action will pass the id of a task\n      const id = action.payload;\n\n      // double confirm deletion\n      const proceed = window.confirm(\"Delete task?\");\n      if (proceed) {\n        state.tasks = state.tasks.filter(task => task.id !== id);\n        state.quantity--;\n      }\n    },\n    editTask(state, action) {\n      // action will pass the edited task\n      const editedTask = action.payload;\n      // console.log(\"editedTask.id:\");\n      // console.log(editedTask.id);\n\n      // find the matching task stored in the redux context\n      const existingTask = state.tasks.find(task => task.id === editedTask.id);\n      if (!existingTask) {\n        console.log(\"Task does not exist wtf?\");\n      }\n\n      // update values...?\n      existingTask.title = editedTask.title;\n      existingTask.desc = editedTask.desc;\n      existingTask.deadline = editedTask.deadline;\n    },\n    setTask(state, action) {\n      state.tasks = action.payload;\n    }\n  }\n});\nexport const taskActions = taskSlice.actions;\nexport default taskSlice;","map":{"version":3,"names":["createSlice","DUMMY_TASKS","id","title","desc","deadline","initialTaskState","tasks","taskSlice","name","initialState","reducers","addTask","state","action","task","payload","axios","post","newTask","then","response","createdTask","data","push","catch","error","console","log","message","Math","random","toString","sort","a","b","Date","quantity","removeTask","proceed","window","confirm","filter","editTask","editedTask","existingTask","find","setTask","taskActions","actions"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/store/task-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// to remove later\nconst DUMMY_TASKS = [\n  {\n    id: \"t1\",\n    title: \"Laundry\",\n    desc: \"Do laundry\",\n    deadline: \"2023-05-27\",\n  },\n  {\n    id: \"t2\",\n    title: \"Workout\",\n    desc: \"Go to the gym\",\n    deadline: \"2023-05-29\",\n  },\n  {\n    id: \"t3\",\n    title: \"Lorem Ipsum\",\n    desc: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam tempus eros fermentum arcu eleifend porttitor. Ut accumsan dui at maximus rutrum. Quisque tristique maximus pretium. Ut tristique a diam ut luctus. Donec auctor, ante a dictum hendrerit, enim massa pretium massa, vel sagittis diam ligula sed nibh. Donec efficitur turpis sed dolor imperdiet blandit. Vivamus imperdiet elit et felis faucibus mollis. Suspendisse mollis dolor ornare lacus faucibus semper. Proin tempor enim nisl. Curabitur elementum, justo sit amet suscipit tincidunt, sapien eros fringilla sapien, vitae pharetra nunc ipsum eu odio. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla pulvinar venenatis erat, nec vulputate tellus.\",\n    deadline: \"2023-06-22\",\n  },\n];\n/* \n    tasks: array of task objects -> { title:___, desc:___, deadline:___ }, 'title' & 'desc' are Strings, 'deadline' is a Date object\n*/\nconst initialTaskState = {\n  tasks: [],\n  //quantity: 0,\n};\n\nconst taskSlice = createSlice({\n  name: \"task\",\n  initialState: initialTaskState,\n  reducers: {\n    addTask(state, action) {\n      // action will pass an entire task object\n      const task = action.payload;\n\n      axios\n        .post(\"/tasks\", newTask)\n        .then((response) => {\n          // Handle the successful response\n          const createdTask = response.data;\n          // Add the created task to the state\n          state.tasks.push(createdTask);\n        })\n        .catch((error) => {\n          // Handle any errors\n          console.log(error.message);\n        });\n\n      state.tasks.push({\n        id: \"t\" + Math.random().toString(),\n        title: task.title,\n        desc: task.desc,\n        deadline: task.deadline,\n      });\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n      state.quantity++;\n    },\n    removeTask(state, action) {\n      // action will pass the id of a task\n      const id = action.payload;\n\n      // double confirm deletion\n      const proceed = window.confirm(\"Delete task?\");\n\n      if (proceed) {\n        state.tasks = state.tasks.filter((task) => task.id !== id);\n        state.quantity--;\n      }\n    },\n    editTask(state, action) {\n      // action will pass the edited task\n      const editedTask = action.payload;\n      // console.log(\"editedTask.id:\");\n      // console.log(editedTask.id);\n\n      // find the matching task stored in the redux context\n      const existingTask = state.tasks.find(\n        (task) => task.id === editedTask.id\n      );\n\n      if (!existingTask) {\n        console.log(\"Task does not exist wtf?\");\n      }\n\n      // update values...?\n      existingTask.title = editedTask.title;\n      existingTask.desc = editedTask.desc;\n      existingTask.deadline = editedTask.deadline;\n    },\n    setTask(state, action) {\n      state.tasks = action.payload;\n    },\n  },\n});\n\nexport const taskActions = taskSlice.actions;\nexport default taskSlice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}