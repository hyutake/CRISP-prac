{"ast":null,"code":"var _jsxFileName = \"/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport TaskList from \"./components/Tasks/TaskList\";\nimport TaskForm from \"./components/Tasks/TaskForm\";\nimport MainHeader from \"./components/Layout/MainHeader\";\nimport { useEffect } from \"react\";\nimport { taskActions } from \"./store/task-slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const showTaskForm = useSelector(state => state.ui.showTaskFormModal);\n  const dispatch = useDispatch();\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    // Fetch tasks from the API when the component mounts\n    const fetchTasks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tasks'); // Replace with the appropriate API endpoint\n        if (!response.ok) {\n          throw new Error('Failed to fetch tasks from the API.');\n        }\n        const data = await response.json();\n        dispatch(taskActions.setTask(data)); // Dispatch an action to store the fetched tasks in the Redux store\n        setIsLoaded(true); // Set isLoaded to true once the tasks are fetched\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchTasks();\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), showTaskForm && /*#__PURE__*/_jsxDEV(TaskForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: !isLoaded ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this) // Render a loading element while tasks are being fetched\n      : /*#__PURE__*/_jsxDEV(TaskList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this) // Render the TaskList component once tasks are fetched\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pUS3v+MsH1cXZJhLnBVSKbCj+MY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Fragment","useState","useSelector","useDispatch","TaskList","TaskForm","MainHeader","useEffect","taskActions","jsxDEV","_jsxDEV","App","_s","showTaskForm","state","ui","showTaskFormModal","dispatch","isLoaded","setIsLoaded","fetchTasks","response","fetch","ok","Error","data","json","setTask","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/App.js"],"sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport TaskList from \"./components/Tasks/TaskList\";\nimport TaskForm from \"./components/Tasks/TaskForm\";\nimport MainHeader from \"./components/Layout/MainHeader\";\nimport { useEffect } from \"react\";\nimport { taskActions } from \"./store/task-slice\";\n\nfunction App() {\n  const showTaskForm = useSelector((state) => state.ui.showTaskFormModal);\n  const dispatch = useDispatch();\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    // Fetch tasks from the API when the component mounts\n    const fetchTasks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tasks'); // Replace with the appropriate API endpoint\n        if (!response.ok) {\n          throw new Error('Failed to fetch tasks from the API.');\n        }\n        const data = await response.json();\n        dispatch(taskActions.setTask(data)); // Dispatch an action to store the fetched tasks in the Redux store\n        setIsLoaded(true); // Set isLoaded to true once the tasks are fetched\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchTasks();\n  }, [dispatch]);\n\n  return (\n    <Fragment>\n      <MainHeader />\n      {showTaskForm && <TaskForm />}\n      <main>\n        {!isLoaded ? (\n          <h2>Loading...</h2> // Render a loading element while tasks are being fetched\n        ) : (\n          <TaskList /> // Render the TaskList component once tasks are fetched\n        )}\n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,QAAQ,QAAQ,OAAO;AACjD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,UAAU,MAAM,gCAAgC;AACvD,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,YAAY,GAAGX,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACC,EAAE,CAACC,iBAAiB,CAAC;EACvE,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAE/CM,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;QAC7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;QACxD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCT,QAAQ,CAACT,WAAW,CAACmB,OAAO,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;QACrCN,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF,CAAC;IAEDR,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;EAEd,oBACEP,OAAA,CAACV,QAAQ;IAAA+B,QAAA,gBACPrB,OAAA,CAACJ,UAAU;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACbtB,YAAY,iBAAIH,OAAA,CAACL,QAAQ;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7BzB,OAAA;MAAAqB,QAAA,EACG,CAACb,QAAQ,gBACRR,OAAA;QAAAqB,QAAA,EAAI;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,CAAC;MAAA,eAEpBzB,OAAA,CAACN,QAAQ;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,CAAC;IACd;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEf;AAACvB,EAAA,CArCQD,GAAG;EAAA,QACWT,WAAW,EACfC,WAAW;AAAA;AAAAiC,EAAA,GAFrBzB,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}