{"ast":null,"code":"var _jsxFileName = \"/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport TaskList from \"./components/Tasks/TaskList\";\nimport TaskForm from \"./components/Tasks/TaskForm\";\nimport MainHeader from \"./components/Layout/MainHeader\";\nimport { useEffect } from \"react\";\nimport { taskActions } from \"./store/task-slice\";\n//test\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const showTaskForm = useSelector(state => state.ui.showTaskFormModal);\n  const dispatch = useDispatch();\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    // Fetch tasks from the API when the component mounts\n    const fetchTasks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tasks'); // Replace with the appropriate API endpoint\n        if (!response.ok) {\n          throw new Error('Failed to fetch tasks from the API.');\n        }\n        const data = await response.json();\n        dispatch(taskActions.setTask(data)); // Dispatch an action to store the fetched tasks in the Redux store\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchTasks();\n    setIsLoaded(false);\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this), showTaskForm && /*#__PURE__*/_jsxDEV(TaskForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: isLoaded ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(TaskList, {\n        loaded: isLoaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"pUS3v+MsH1cXZJhLnBVSKbCj+MY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Fragment","useState","useSelector","useDispatch","TaskList","TaskForm","MainHeader","useEffect","taskActions","jsxDEV","_jsxDEV","App","_s","showTaskForm","state","ui","showTaskFormModal","dispatch","isLoaded","setIsLoaded","fetchTasks","response","fetch","ok","Error","data","json","setTask","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","loaded","_c","$RefreshReg$"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/App.js"],"sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport TaskList from \"./components/Tasks/TaskList\";\nimport TaskForm from \"./components/Tasks/TaskForm\";\nimport MainHeader from \"./components/Layout/MainHeader\";\nimport { useEffect } from \"react\";\nimport { taskActions } from \"./store/task-slice\";\n//test\nfunction App() {\n\tconst showTaskForm = useSelector((state) => state.ui.showTaskFormModal);\n\tconst dispatch = useDispatch();\n\tconst [isLoaded, setIsLoaded] = useState(false);\n\t  \n\n\tuseEffect(() => {\n\t\t// Fetch tasks from the API when the component mounts\n\t\tconst fetchTasks = async () => {\n\t\t  try {\n\t\t\t\n\t\t\tconst response = await fetch('http://localhost:3001/tasks'); // Replace with the appropriate API endpoint\n\t\t\tif (!response.ok) {\n\t\t\t  throw new Error('Failed to fetch tasks from the API.');\n\t\t\t}\n\t\t\tconst data = await response.json();\n\t\t\tdispatch(taskActions.setTask(data)); // Dispatch an action to store the fetched tasks in the Redux store\n\t\t  } catch (error) {\n\t\t\tconsole.log(error);\n\t\t  }\n\t\t};\n\n\t\tfetchTasks();\n\t\tsetIsLoaded(false);\n\t}, [dispatch])\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<MainHeader />\n\t\t\t{showTaskForm && (\n\t\t\t\t<TaskForm />\n\t\t\t)}\n\t\t\t<main>\n\t\t\t\t{isLoaded ?(\n\t\t\t\t\t<p>loading...</p>\n\t\t\t\t) : (\n\t\t\t\t\t<TaskList loaded={isLoaded} />\n\t\t\t\t)\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t</main>\n\t\t</Fragment>\n\t);\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,QAAQ,QAAQ,OAAO;AACjD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,UAAU,MAAM,gCAAgC;AACvD,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,oBAAoB;AAChD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAMC,YAAY,GAAGX,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACC,EAAE,CAACC,iBAAiB,CAAC;EACvE,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAG/CM,SAAS,CAAC,MAAM;IACf;IACA,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QAEL,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;QAC7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;QACxD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCT,QAAQ,CAACT,WAAW,CAACmB,OAAO,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC,OAAOG,KAAK,EAAE;QACjBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACjB;IACF,CAAC;IAEDR,UAAU,CAAC,CAAC;IACZD,WAAW,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EAEd,oBACCP,OAAA,CAACV,QAAQ;IAAA+B,QAAA,gBACRrB,OAAA,CAACJ,UAAU;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACbtB,YAAY,iBACZH,OAAA,CAACL,QAAQ;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACX,eACDzB,OAAA;MAAAqB,QAAA,EACEb,QAAQ,gBACRR,OAAA;QAAAqB,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,gBAEjBzB,OAAA,CAACN,QAAQ;QAACgC,MAAM,EAAElB;MAAS;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAC7B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAII,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEb;AAACvB,EAAA,CA5CQD,GAAG;EAAA,QACUT,WAAW,EACfC,WAAW;AAAA;AAAAkC,EAAA,GAFpB1B,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}