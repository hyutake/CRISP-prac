{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { taskActions } from \"./task-slice\";\nimport { useDispatch } from \"react-redux\";\n\n// export const fetchTasks = () => {\n//   return async (dispatch) => {\n//     try {\n//       const response = await axios.get(\"http://localhost:3001/tasks\");\n//       if (response.status === 200) {\n//         const tasks = response.data;\n//         console.log(\"fetching\" + tasks);\n//         //dispatch(taskActions.setTask(tasks));\n\n//         return tasks;\n//       } else {\n//         throw new Error(\"Failed to fetch tasks from the API.\");\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n// };\n\n// export const setTasks = () => {\n//   return async (dispatch) => {\n//       tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n//       while (state.tasks != action.payload){\n//         state.tasks = action.payload;\n//     }\n//   }\n// }\n\n// export const setTasks = (state, tasks) => {\n//   return (dispatch) => {\n//     console.log(\"lol\");\n//     const sortedTasks = tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n//     //dispatch(taskActions.setTask(sortedTasks));\n//     state.tasks = sortedTasks;\n//   };\n// };\n\n// import axios from \"axios\";\n// import { taskActions } from \"./task-slice\";\n// import { useDispatch } from \"react-redux\";\n\nexport const fetchTasks = () => {\n  return async tasks => {\n    try {\n      const response = await axios.get(\"http://localhost:3001/tasks\");\n      if (response.status === 200) {\n        //const dispatch = useDispatch();\n        const tasks = response.data;\n        console.log(\"fetching\");\n        //dispatch(taskActions.setTask(tasks));\n        return tasks;\n      } else {\n        throw new Error(\"Failed to fetch tasks from the API.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const useResetTasks = () => {\n  _s();\n  const dispatch = useDispatch();\n  dispatch(fetchTasks()).then(tasks => {\n    // Handle the fetched tasks\n    dispatch(taskActions.setTask(tasks));\n    console.log(tasks);\n  }).catch(error => {\n    // Handle error if any\n    console.log(error);\n  });\n};\n_s(useResetTasks, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["axios","taskActions","useDispatch","fetchTasks","tasks","response","get","status","data","console","log","Error","error","useResetTasks","_s","dispatch","then","setTask","catch"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/store/useFetchTasks.js"],"sourcesContent":["import axios from \"axios\";\nimport {taskActions} from \"./task-slice\";\nimport { useDispatch } from \"react-redux\";\n\n// export const fetchTasks = () => {\n//   return async (dispatch) => {\n//     try {\n//       const response = await axios.get(\"http://localhost:3001/tasks\");\n//       if (response.status === 200) {\n//         const tasks = response.data;\n//         console.log(\"fetching\" + tasks);\n//         //dispatch(taskActions.setTask(tasks));\n        \n//         return tasks;\n//       } else {\n//         throw new Error(\"Failed to fetch tasks from the API.\");\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n// };\n\n// export const setTasks = () => {\n//   return async (dispatch) => {\n//       tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n//       while (state.tasks != action.payload){\n//         state.tasks = action.payload;\n//     }\n//   }\n// }\n\n\n// export const setTasks = (state, tasks) => {\n//   return (dispatch) => {\n//     console.log(\"lol\");\n//     const sortedTasks = tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n//     //dispatch(taskActions.setTask(sortedTasks));\n//     state.tasks = sortedTasks;\n//   };\n// };\n\n\n// import axios from \"axios\";\n// import { taskActions } from \"./task-slice\";\n// import { useDispatch } from \"react-redux\";\n\nexport const fetchTasks = () => {\n  return async (tasks) => {\n    try {\n      const response = await axios.get(\"http://localhost:3001/tasks\");\n      if (response.status === 200) {\n        //const dispatch = useDispatch();\n        const tasks = response.data;\n        console.log(\"fetching\");\n        //dispatch(taskActions.setTask(tasks));\n        return tasks;\n      } else {\n        throw new Error(\"Failed to fetch tasks from the API.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n\nexport const useResetTasks = () => {\n  const dispatch = useDispatch();\n  dispatch(fetchTasks())\n  .then((tasks) => {\n\n    // Handle the fetched tasks\n    dispatch(taskActions.setTask(tasks));\n    console.log(tasks);\n  })\n  .catch((error) => {\n    // Handle error if any\n    console.log(error);\n  });\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,WAAW,QAAO,cAAc;AACxC,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAO,MAAOC,KAAK,IAAK;IACtB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,6BAA6B,CAAC;MAC/D,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B;QACA,MAAMH,KAAK,GAAGC,QAAQ,CAACG,IAAI;QAC3BC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;QACvB;QACA,OAAON,KAAK;MACd,CAAC,MAAM;QACL,MAAM,IAAIO,KAAK,CAAC,qCAAqC,CAAC;MACxD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;IACpB;EACF,CAAC;AACH,CAAC;AAGD,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9Ba,QAAQ,CAACZ,UAAU,CAAC,CAAC,CAAC,CACrBa,IAAI,CAAEZ,KAAK,IAAK;IAEf;IACAW,QAAQ,CAACd,WAAW,CAACgB,OAAO,CAACb,KAAK,CAAC,CAAC;IACpCK,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;EACpB,CAAC,CAAC,CACDc,KAAK,CAAEN,KAAK,IAAK;IAChB;IACAH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;EACpB,CAAC,CAAC;AACJ,CAAC;AAAAE,EAAA,CAbYD,aAAa;EAAA,QACPX,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}