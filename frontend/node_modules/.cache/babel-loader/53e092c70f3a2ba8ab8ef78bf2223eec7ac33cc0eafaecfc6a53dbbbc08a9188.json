{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport useFetchTasks, { fetchTasks, useInitTasks } from \"./useFetchTasks\";\nconst initialTaskState = {\n  tasks: []\n  //quantity: 0,\n};\n\nconst taskSlice = createSlice({\n  name: \"task\",\n  initialState: initialTaskState,\n  reducers: {\n    addTask(state, action) {\n      // action will pass an entire task object\n      const task = action.payload;\n      state.tasks.push({\n        _id: task._id,\n        title: task.title,\n        description: task.description,\n        deadline: task.deadline,\n        status: \"In progress\",\n        // newly added tasks will ALWAYS be 'In progress'\n        completedDate: null // newly added tasks will not have a completedDate value yet\n      });\n\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    },\n    removeTask(state, action) {\n      // action will pass the id of a task\n      const id = action.payload;\n      state.tasks = state.tasks.filter(task => task._id !== id);\n    },\n    editTask(state, action) {\n      //dispatch can be taken in as arg\n      // action will pass the edited task\n      const editedTask = action.payload;\n\n      // Find the index of the task with the matching _id in the state.tasks array\n      console.log(state.tasks);\n      console.log(editedTask);\n      const task = state.tasks.find(task => task._id === editedTask.id);\n      console.log(task);\n      if (task !== null) {\n        // Update the task properties with the new values from the payload\n        task.title = editedTask.title;\n        task.description = editedTask.description;\n        task.deadline = editedTask.deadline;\n        task.completed = editedTask.completed;\n      }\n\n      //fetchTasks\n      //setTasks\n\n      //refactor into another event,\n      //have another actions file\n    },\n\n    setTask(state, action) {\n      //action.payload.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n      while (state.tasks != action.payload) {\n        state.tasks = action.payload;\n      }\n    }\n  }\n});\nexport const taskActions = taskSlice.actions;\nexport default taskSlice;","map":{"version":3,"names":["createSlice","axios","useFetchTasks","fetchTasks","useInitTasks","initialTaskState","tasks","taskSlice","name","initialState","reducers","addTask","state","action","task","payload","push","_id","title","description","deadline","status","completedDate","sort","a","b","Date","removeTask","id","filter","editTask","editedTask","console","log","find","completed","setTask","taskActions","actions"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/store/task-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport useFetchTasks, { fetchTasks, useInitTasks } from \"./useFetchTasks\";\nconst initialTaskState = {\n  tasks: [],\n  //quantity: 0,\n};\n\nconst taskSlice = createSlice({\n  name: \"task\",\n  initialState: initialTaskState,\n  reducers: {\n    addTask(state, action) {\n      // action will pass an entire task object\n      const task = action.payload;\n\n      state.tasks.push({\n        _id: task._id,\n        title: task.title,\n        description: task.description,\n        deadline: task.deadline,\n        status: \"In progress\", // newly added tasks will ALWAYS be 'In progress'\n        completedDate: null, // newly added tasks will not have a completedDate value yet\n      });\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    },\n    removeTask(state, action) {\n      // action will pass the id of a task\n      const id = action.payload;\n      state.tasks = state.tasks.filter((task) => task._id !== id);\n    },\n    editTask(state, action) {\n      //dispatch can be taken in as arg\n      // action will pass the edited task\n      const editedTask = action.payload;\n\n      // Find the index of the task with the matching _id in the state.tasks array\n      console.log(state.tasks);\n      console.log(editedTask);\n      const task = state.tasks.find((task) => task._id === editedTask.id);\n      console.log(task);\n      if (task !== null) {\n        // Update the task properties with the new values from the payload\n        task.title = editedTask.title;\n        task.description = editedTask.description;\n        task.deadline = editedTask.deadline;\n        task.completed = editedTask.completed;\n      }\n\n      //fetchTasks\n      //setTasks\n\n      //refactor into another event,\n      //have another actions file\n    },\n    setTask(state, action) {\n      //action.payload.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n      while (state.tasks != action.payload) {\n        state.tasks = action.payload;\n      }\n    },\n  },\n});\n\nexport const taskActions = taskSlice.actions;\nexport default taskSlice;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,IAAIC,UAAU,EAAEC,YAAY,QAAQ,iBAAiB;AACzE,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE;EACP;AACF,CAAC;;AAED,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEJ,gBAAgB;EAC9BK,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACrB;MACA,MAAMC,IAAI,GAAGD,MAAM,CAACE,OAAO;MAE3BH,KAAK,CAACN,KAAK,CAACU,IAAI,CAAC;QACfC,GAAG,EAAEH,IAAI,CAACG,GAAG;QACbC,KAAK,EAAEJ,IAAI,CAACI,KAAK;QACjBC,WAAW,EAAEL,IAAI,CAACK,WAAW;QAC7BC,QAAQ,EAAEN,IAAI,CAACM,QAAQ;QACvBC,MAAM,EAAE,aAAa;QAAE;QACvBC,aAAa,EAAE,IAAI,CAAE;MACvB,CAAC,CAAC;;MACFV,KAAK,CAACN,KAAK,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACJ,QAAQ,CAAC,GAAG,IAAIM,IAAI,CAACD,CAAC,CAACL,QAAQ,CAAC,CAAC;IACzE,CAAC;IACDO,UAAUA,CAACf,KAAK,EAAEC,MAAM,EAAE;MACxB;MACA,MAAMe,EAAE,GAAGf,MAAM,CAACE,OAAO;MACzBH,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACuB,MAAM,CAAEf,IAAI,IAAKA,IAAI,CAACG,GAAG,KAAKW,EAAE,CAAC;IAC7D,CAAC;IACDE,QAAQA,CAAClB,KAAK,EAAEC,MAAM,EAAE;MACtB;MACA;MACA,MAAMkB,UAAU,GAAGlB,MAAM,CAACE,OAAO;;MAEjC;MACAiB,OAAO,CAACC,GAAG,CAACrB,KAAK,CAACN,KAAK,CAAC;MACxB0B,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;MACvB,MAAMjB,IAAI,GAAGF,KAAK,CAACN,KAAK,CAAC4B,IAAI,CAAEpB,IAAI,IAAKA,IAAI,CAACG,GAAG,KAAKc,UAAU,CAACH,EAAE,CAAC;MACnEI,OAAO,CAACC,GAAG,CAACnB,IAAI,CAAC;MACjB,IAAIA,IAAI,KAAK,IAAI,EAAE;QACjB;QACAA,IAAI,CAACI,KAAK,GAAGa,UAAU,CAACb,KAAK;QAC7BJ,IAAI,CAACK,WAAW,GAAGY,UAAU,CAACZ,WAAW;QACzCL,IAAI,CAACM,QAAQ,GAAGW,UAAU,CAACX,QAAQ;QACnCN,IAAI,CAACqB,SAAS,GAAGJ,UAAU,CAACI,SAAS;MACvC;;MAEA;MACA;;MAEA;MACA;IACF,CAAC;;IACDC,OAAOA,CAACxB,KAAK,EAAEC,MAAM,EAAE;MACrB;MACA,OAAOD,KAAK,CAACN,KAAK,IAAIO,MAAM,CAACE,OAAO,EAAE;QACpCH,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACE,OAAO;MAC9B;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMsB,WAAW,GAAG9B,SAAS,CAAC+B,OAAO;AAC5C,eAAe/B,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}