{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport useFetchTasks, { fetchTasks, useInitTasks } from \"./task-actions\";\nconst initialTaskState = {\n  tasks: []\n  //quantity: 0,\n};\n\nconst taskSlice = createSlice({\n  name: \"task\",\n  initialState: initialTaskState,\n  reducers: {\n    addTask(state, action) {\n      // action will pass an entire task object\n      const task = action.payload;\n      //push the task to the object array(?) of tasks\n      state.tasks.push({\n        _id: task._id,\n        title: task.title,\n        description: task.description,\n        deadline: task.deadline\n      });\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    },\n    removeTask(state, action) {\n      // action will pass the id of a task\n      const id = action.payload;\n      state.tasks = state.tasks.filter(task => task._id !== id);\n    },\n    editTask(state, action) {\n      // action will pass the edited task\n      const editedTask = action.payload;\n      // Find the index of the task with the matching _id in the state.tasks array\n      const task = state.tasks.find(task => task._id === editedTask.id);\n      if (task !== null) {\n        // Update the task properties with the new values from the payload\n        task.title = editedTask.title;\n        task.description = editedTask.description;\n        task.deadline = editedTask.deadline;\n        task.completed = editedTask.completed;\n      }\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    },\n    setTask(state, action) {\n      state.tasks = action.payload;\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    }\n  }\n});\nexport const taskStateActions = taskSlice.actions;\nexport default taskSlice;","map":{"version":3,"names":["createSlice","axios","useFetchTasks","fetchTasks","useInitTasks","initialTaskState","tasks","taskSlice","name","initialState","reducers","addTask","state","action","task","payload","push","_id","title","description","deadline","sort","a","b","Date","removeTask","id","filter","editTask","editedTask","find","completed","setTask","taskStateActions","actions"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/store/task-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport useFetchTasks, { fetchTasks, useInitTasks } from \"./task-actions\";\nconst initialTaskState = {\n  tasks: [],\n  //quantity: 0,\n};\n\nconst taskSlice = createSlice({\n  name: \"task\",\n  initialState: initialTaskState,\n  reducers: {\n    addTask(state, action) {\n      // action will pass an entire task object\n      const task = action.payload;\n      //push the task to the object array(?) of tasks\n      state.tasks.push({\n        _id: task._id,\n        title: task.title,\n        description: task.description,\n        deadline: task.deadline,\n      });\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    },\n    removeTask(state, action) {\n      // action will pass the id of a task\n      const id = action.payload;\n      state.tasks = state.tasks.filter((task) => task._id !== id);\n    },\n    editTask(state, action) {\n      // action will pass the edited task\n      const editedTask = action.payload;\n      // Find the index of the task with the matching _id in the state.tasks array\n      const task = state.tasks.find((task) => task._id === editedTask.id);\n      if (task !== null) {\n        // Update the task properties with the new values from the payload\n        task.title = editedTask.title;\n        task.description = editedTask.description;\n        task.deadline = editedTask.deadline;\n        task.completed = editedTask.completed;\n      }\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    },\n    setTask(state, action) {\n      state.tasks = action.payload;\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    },\n  },\n});\n\nexport const taskStateActions = taskSlice.actions;\nexport default taskSlice;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,IAAIC,UAAU,EAAEC,YAAY,QAAQ,gBAAgB;AACxE,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE;EACP;AACF,CAAC;;AAED,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEJ,gBAAgB;EAC9BK,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACrB;MACA,MAAMC,IAAI,GAAGD,MAAM,CAACE,OAAO;MAC3B;MACAH,KAAK,CAACN,KAAK,CAACU,IAAI,CAAC;QACfC,GAAG,EAAEH,IAAI,CAACG,GAAG;QACbC,KAAK,EAAEJ,IAAI,CAACI,KAAK;QACjBC,WAAW,EAAEL,IAAI,CAACK,WAAW;QAC7BC,QAAQ,EAAEN,IAAI,CAACM;MACjB,CAAC,CAAC;MACFR,KAAK,CAACN,KAAK,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACF,QAAQ,CAAC,GAAG,IAAII,IAAI,CAACD,CAAC,CAACH,QAAQ,CAAC,CAAC;IACzE,CAAC;IACDK,UAAUA,CAACb,KAAK,EAAEC,MAAM,EAAE;MACxB;MACA,MAAMa,EAAE,GAAGb,MAAM,CAACE,OAAO;MACzBH,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACqB,MAAM,CAAEb,IAAI,IAAKA,IAAI,CAACG,GAAG,KAAKS,EAAE,CAAC;IAC7D,CAAC;IACDE,QAAQA,CAAChB,KAAK,EAAEC,MAAM,EAAE;MACtB;MACA,MAAMgB,UAAU,GAAGhB,MAAM,CAACE,OAAO;MACjC;MACA,MAAMD,IAAI,GAAGF,KAAK,CAACN,KAAK,CAACwB,IAAI,CAAEhB,IAAI,IAAKA,IAAI,CAACG,GAAG,KAAKY,UAAU,CAACH,EAAE,CAAC;MACnE,IAAIZ,IAAI,KAAK,IAAI,EAAE;QACjB;QACAA,IAAI,CAACI,KAAK,GAAGW,UAAU,CAACX,KAAK;QAC7BJ,IAAI,CAACK,WAAW,GAAGU,UAAU,CAACV,WAAW;QACzCL,IAAI,CAACM,QAAQ,GAAGS,UAAU,CAACT,QAAQ;QACnCN,IAAI,CAACiB,SAAS,GAAGF,UAAU,CAACE,SAAS;MACvC;MACAnB,KAAK,CAACN,KAAK,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACF,QAAQ,CAAC,GAAG,IAAII,IAAI,CAACD,CAAC,CAACH,QAAQ,CAAC,CAAC;IACzE,CAAC;IACDY,OAAOA,CAACpB,KAAK,EAAEC,MAAM,EAAE;MACrBD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACE,OAAO;MAC5BH,KAAK,CAACN,KAAK,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACF,QAAQ,CAAC,GAAG,IAAII,IAAI,CAACD,CAAC,CAACH,QAAQ,CAAC,CAAC;IACzE;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMa,gBAAgB,GAAG1B,SAAS,CAAC2B,OAAO;AACjD,eAAe3B,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}