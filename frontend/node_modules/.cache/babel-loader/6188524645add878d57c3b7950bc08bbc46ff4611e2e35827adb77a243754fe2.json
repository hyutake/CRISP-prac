{"ast":null,"code":"var _jsxFileName = \"/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TaskList from \"./components/Tasks/TaskList\";\nimport TaskForm from \"./components/Tasks/TaskForm\";\nimport MainHeader from \"./components/Layout/MainHeader\";\nimport { uiActions } from \"./store/ui-slice\";\nimport { taskActions } from \"./store/task-slice\";\nimport axios from \"axios\";\n//import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const showTaskForm = useSelector(state => state.ui.showTaskFormModal);\n  const dispatch = useDispatch();\n  const tasks = useSelector(state => state.task.tasks);\n  useEffect(() => {\n    // Fetch tasks from the API when the component mounts\n    fetchTasks();\n  }, []);\n\n  //   const fetchTasks = async () => {\n  //     try {\n  //       const response = await fetch(\"http://localhost:3001/tasks\"); // Replace \"/products\" with the appropriate API endpoint\n  //       if (!response.ok) {\n  //         throw new Error(\"Failed to fetch tasks from the API.\");\n  //       }\n  //       const data = await response.json();\n  //       dispatch(taskActions.setTasks(data)); // Dispatch an action to store the fetched tasks in the Redux store\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n  //   };\n\n  const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\n    try {\n      const response = await axios.get('http://localhost:3001/tasks'); // Replace with your server URL\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch tasks from the API.\");\n      }\n      const options = {\n        method: 'GET'\n      };\n      const data = await fetch('http://localhost:3001/tasks', options).json();\n      dispatch(taskActions.setTasks(data)); // Dispatch an action to store the fetched tasks in the Redux store\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  const showAddTaskFormHandler = () => {\n    dispatch(taskActions.hideTaskForm()); // Reset the task form state\n    dispatch(uiActions.showAddTaskForm()); // Show the add task form\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), showTaskForm && /*#__PURE__*/_jsxDEV(TaskForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskList, {\n        tasks: tasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showAddTaskFormHandler,\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uxAFwrbq+hE/TEYDiac31yL0BWM=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Fragment","useEffect","useDispatch","useSelector","TaskList","TaskForm","MainHeader","uiActions","taskActions","axios","jsxDEV","_jsxDEV","App","_s","showTaskForm","state","ui","showTaskFormModal","dispatch","tasks","task","fetchTasks","createAsyncThunk","response","get","ok","Error","options","method","data","fetch","json","setTasks","error","console","log","showAddTaskFormHandler","hideTaskForm","showAddTaskForm","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/App.js"],"sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TaskList from \"./components/Tasks/TaskList\";\nimport TaskForm from \"./components/Tasks/TaskForm\";\nimport MainHeader from \"./components/Layout/MainHeader\";\nimport { uiActions } from \"./store/ui-slice\";\nimport { taskActions } from \"./store/task-slice\";\nimport axios from \"axios\";\n//import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n\nfunction App() {\n  const showTaskForm = useSelector((state) => state.ui.showTaskFormModal);\n  const dispatch = useDispatch();\n  const tasks = useSelector((state) => state.task.tasks);\n\n  useEffect(() => {\n    // Fetch tasks from the API when the component mounts\n    fetchTasks();\n  }, []);\n\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await fetch(\"http://localhost:3001/tasks\"); // Replace \"/products\" with the appropriate API endpoint\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch tasks from the API.\");\n//       }\n//       const data = await response.json();\n//       dispatch(taskActions.setTasks(data)); // Dispatch an action to store the fetched tasks in the Redux store\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n  const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\n\ttry {\n\t  const response = await axios.get('http://localhost:3001/tasks'); // Replace with your server URL\n\t  if (!response.ok) {\n        throw new Error(\"Failed to fetch tasks from the API.\");\n      }\n\n\t  const options = {method: 'GET'};\n\t  const data = await fetch('http://localhost:3001/tasks', options).json();\n      dispatch(taskActions.setTasks(data)); // Dispatch an action to store the fetched tasks in the Redux store\n\t  \n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n  });\n\n  const showAddTaskFormHandler = () => {\n    dispatch(taskActions.hideTaskForm()); // Reset the task form state\n    dispatch(uiActions.showAddTaskForm()); // Show the add task form\n  };\n\n  return (\n    <Fragment>\n      <MainHeader />\n      {showTaskForm && <TaskForm />}\n      <main>\n        <TaskList tasks={tasks} /> {/* Pass the tasks to the TaskList component */}\n        <button onClick={showAddTaskFormHandler}>Add Task</button>\n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}