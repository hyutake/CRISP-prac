{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport useFetchTasks, { fetchTasks, useInitTasks } from \"./useFetchTasks\";\nconst initialTaskState = {\n  tasks: []\n  //quantity: 0,\n};\n\nconst taskSlice = createSlice({\n  name: \"task\",\n  initialState: initialTaskState,\n  reducers: {\n    addTask(state, action) {\n      // action will pass an entire task object\n      const task = action.payload;\n      state.tasks.push({\n        _id: task._id,\n        title: task.title,\n        desc: task.desc,\n        deadline: task.deadline,\n        status: 'In progress',\n        // newly added tasks will ALWAYS be 'In progress'\n        completedDate: null // newly added tasks will not have a completedDate value yet\n      });\n\n      state.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    },\n    removeTask(state, action) {\n      // action will pass the id of a task\n      const id = action.payload;\n      state.tasks = state.tasks.filter(task => task._id !== id);\n    },\n    editTask(state, action) {\n      //dispatch can be taken in as arg\n      // action will pass the edited task\n      const editedTask = action.payload;\n\n      // Find the index of the task with the matching _id in the state.tasks array\n      const existingTask = state.tasks.find(task => task._id === editedTask._id);\n      console.log(existingTask);\n      if (existingTask !== null) {\n        // Update the task properties with the new values from the payload\n        existingTask.title = editedTask.title;\n        existingTask.desc = editedTask.description;\n        existingTask.deadline = editedTask.deadline;\n        existingTask.completed = editedTask.completed;\n      }\n\n      //fetchTasks\n      //setTasks\n\n      //refactor into another event, \n      //have another actions file\n    },\n\n    setTask(state, action) {\n      //action.payload.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n      while (state.tasks != action.payload) {\n        state.tasks = action.payload;\n      }\n    }\n  }\n});\nexport const taskActions = taskSlice.actions;\nexport default taskSlice;","map":{"version":3,"names":["createSlice","axios","useFetchTasks","fetchTasks","useInitTasks","initialTaskState","tasks","taskSlice","name","initialState","reducers","addTask","state","action","task","payload","push","_id","title","desc","deadline","status","completedDate","sort","a","b","Date","removeTask","id","filter","editTask","editedTask","existingTask","find","console","log","description","completed","setTask","taskActions","actions"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/store/task-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport useFetchTasks, { fetchTasks, useInitTasks } from \"./useFetchTasks\";\nconst initialTaskState = {\n  tasks: [],\n  //quantity: 0,\n};\n\nconst taskSlice = createSlice({\n\t\n  name: \"task\",\n  initialState: initialTaskState,\n  reducers: {\n    addTask(state, action) {\n      // action will pass an entire task object\n      const task = action.payload;\n\n\t\t\tstate.tasks.push({\n\t\t\t\t_id: task._id,\n                title: task.title,\n                desc: task.desc,\n                deadline: task.deadline,\n\t\t\t\tstatus: 'In progress',\t// newly added tasks will ALWAYS be 'In progress'\n\t\t\t\tcompletedDate: null\t\t// newly added tasks will not have a completedDate value yet\n            });\n\t\t\tstate.tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n    },\n    removeTask(state, action) {\n      // action will pass the id of a task\n      const id = action.payload;\n      state.tasks = state.tasks.filter((task) => task._id !== id);\n    },\n    editTask(state, action) { \n      //dispatch can be taken in as arg\n      // action will pass the edited task\n      const editedTask = action.payload;\n\n  // Find the index of the task with the matching _id in the state.tasks array\n  const existingTask = state.tasks.find((task) => task._id === editedTask._id);\n  console.log(existingTask);\n\n  if (existingTask !== null) {\n    // Update the task properties with the new values from the payload\n    existingTask.title = editedTask.title;\n    existingTask.desc = editedTask.description;\n    existingTask.deadline = editedTask.deadline;\n    existingTask.completed = editedTask.completed;\n  }\n      \n      //fetchTasks\n      //setTasks\n      \n\n      //refactor into another event, \n      //have another actions file\n      \n    },\n    setTask(state, action) {\n\t  //action.payload.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n      while (state.tasks != action.payload){\n        state.tasks = action.payload;\n      }\n    },\n  },\n});\n\nexport const taskActions = taskSlice.actions;\nexport default taskSlice;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,IAAIC,UAAU,EAAEC,YAAY,QAAQ,iBAAiB;AACzE,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE;EACP;AACF,CAAC;;AAED,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAE5BQ,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEJ,gBAAgB;EAC9BK,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACrB;MACA,MAAMC,IAAI,GAAGD,MAAM,CAACE,OAAO;MAE9BH,KAAK,CAACN,KAAK,CAACU,IAAI,CAAC;QAChBC,GAAG,EAAEH,IAAI,CAACG,GAAG;QACDC,KAAK,EAAEJ,IAAI,CAACI,KAAK;QACjBC,IAAI,EAAEL,IAAI,CAACK,IAAI;QACfC,QAAQ,EAAEN,IAAI,CAACM,QAAQ;QACnCC,MAAM,EAAE,aAAa;QAAE;QACvBC,aAAa,EAAE,IAAI,CAAE;MACb,CAAC,CAAC;;MACXV,KAAK,CAACN,KAAK,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACJ,QAAQ,CAAC,GAAG,IAAIM,IAAI,CAACD,CAAC,CAACL,QAAQ,CAAC,CAAC;IACtE,CAAC;IACDO,UAAUA,CAACf,KAAK,EAAEC,MAAM,EAAE;MACxB;MACA,MAAMe,EAAE,GAAGf,MAAM,CAACE,OAAO;MACzBH,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACuB,MAAM,CAAEf,IAAI,IAAKA,IAAI,CAACG,GAAG,KAAKW,EAAE,CAAC;IAC7D,CAAC;IACDE,QAAQA,CAAClB,KAAK,EAAEC,MAAM,EAAE;MACtB;MACA;MACA,MAAMkB,UAAU,GAAGlB,MAAM,CAACE,OAAO;;MAErC;MACA,MAAMiB,YAAY,GAAGpB,KAAK,CAACN,KAAK,CAAC2B,IAAI,CAAEnB,IAAI,IAAKA,IAAI,CAACG,GAAG,KAAKc,UAAU,CAACd,GAAG,CAAC;MAC5EiB,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;MAEzB,IAAIA,YAAY,KAAK,IAAI,EAAE;QACzB;QACAA,YAAY,CAACd,KAAK,GAAGa,UAAU,CAACb,KAAK;QACrCc,YAAY,CAACb,IAAI,GAAGY,UAAU,CAACK,WAAW;QAC1CJ,YAAY,CAACZ,QAAQ,GAAGW,UAAU,CAACX,QAAQ;QAC3CY,YAAY,CAACK,SAAS,GAAGN,UAAU,CAACM,SAAS;MAC/C;;MAEI;MACA;;MAGA;MACA;IAEF,CAAC;;IACDC,OAAOA,CAAC1B,KAAK,EAAEC,MAAM,EAAE;MACxB;MACG,OAAOD,KAAK,CAACN,KAAK,IAAIO,MAAM,CAACE,OAAO,EAAC;QACnCH,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACE,OAAO;MAC9B;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMwB,WAAW,GAAGhC,SAAS,CAACiC,OAAO;AAC5C,eAAejC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}