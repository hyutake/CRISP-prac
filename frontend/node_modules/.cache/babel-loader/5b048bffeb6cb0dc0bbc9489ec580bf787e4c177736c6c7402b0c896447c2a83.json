{"ast":null,"code":"import { taskActions } from \"./task-slice\";\nimport axios from \"axios\";\nconst fetchTasks = () => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(\"http://localhost:3001/tasks\");\n      if (response.status === 200) {\n        const tasks = response.data;\n        dispatch(taskActions.setTask(tasks));\n      } else {\n        throw new Error(\"Failed to fetch tasks from the API.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nconst updateTask = (id, updatedTask) => {\n  return async dispatch => {\n    try {\n      const response = await axios.put(`http://localhost:3001/tasks/${id}`, updatedTask);\n      if (response.status === 200) {\n        const task = response.data;\n        dispatch(taskActions.updateTask(task)); // Dispatch the updateTask action with the updated task\n      } else {\n        throw new Error(\"Failed to update the task.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport default {\n  fetchTasks,\n  updateTask\n};","map":{"version":3,"names":["taskActions","axios","fetchTasks","dispatch","response","get","status","tasks","data","setTask","Error","error","console","log","updateTask","id","updatedTask","put","task"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/store/useFetchTasks.js"],"sourcesContent":["import { taskActions } from \"./task-slice\";\nimport axios from \"axios\";\n\nconst fetchTasks = () => {\n  return async (dispatch) => {\n    try {\n      const response = await axios.get(\"http://localhost:3001/tasks\");\n      if (response.status === 200) {\n        const tasks = response.data;\n        dispatch(taskActions.setTask(tasks));\n      } else {\n        throw new Error(\"Failed to fetch tasks from the API.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst updateTask = (id, updatedTask) => {\n  return async (dispatch) => {\n    try {\n      const response = await axios.put(\n        `http://localhost:3001/tasks/${id}`,\n        updatedTask\n      );\n      if (response.status === 200) {\n        const task = response.data;\n        dispatch(taskActions.updateTask(task)); // Dispatch the updateTask action with the updated task\n      } else {\n        throw new Error(\"Failed to update the task.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport  default { fetchTasks, updateTask };\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,cAAc;AAC1C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,OAAO,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,6BAA6B,CAAC;MAC/D,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,KAAK,GAAGH,QAAQ,CAACI,IAAI;QAC3BL,QAAQ,CAACH,WAAW,CAACS,OAAO,CAACF,KAAK,CAAC,CAAC;MACtC,CAAC,MAAM;QACL,MAAM,IAAIG,KAAK,CAAC,qCAAqC,CAAC;MACxD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;AACH,CAAC;AAED,MAAMG,UAAU,GAAGA,CAACC,EAAE,EAAEC,WAAW,KAAK;EACtC,OAAO,MAAOb,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACgB,GAAG,CAC7B,+BAA8BF,EAAG,EAAC,EACnCC,WACF,CAAC;MACD,IAAIZ,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMY,IAAI,GAAGd,QAAQ,CAACI,IAAI;QAC1BL,QAAQ,CAACH,WAAW,CAACc,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;MAC1C,CAAC,MAAM;QACL,MAAM,IAAIR,KAAK,CAAC,4BAA4B,CAAC;MAC/C;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;AACH,CAAC;AAED,eAAgB;EAAET,UAAU;EAAEY;AAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}