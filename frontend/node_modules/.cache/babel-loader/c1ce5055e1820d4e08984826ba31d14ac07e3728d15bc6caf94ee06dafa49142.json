{"ast":null,"code":"import axios from \"axios\";\nimport { taskActions } from \"./task-slice\";\nexport const fetchTasks = () => {\n  return async dispatch => {\n    try {\n      const response = await axios.get(\"http://localhost:3001/tasks\");\n      if (response.status === 200) {\n        const tasks = response.data;\n        console.log(\"fetching\");\n        dispatch(taskActions.setTask(tasks));\n      } else {\n        throw new Error(\"Failed to fetch tasks from the API.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"names":["axios","taskActions","fetchTasks","dispatch","response","get","status","tasks","data","console","log","setTask","Error","error"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/store/useFetchTasks.js"],"sourcesContent":["import axios from \"axios\";\nimport {taskActions} from \"./task-slice\";\n\nexport const fetchTasks = () => {\n  return async (dispatch) => {\n    try {\n      const response = await axios.get(\"http://localhost:3001/tasks\");\n      if (response.status === 200) {\n        const tasks = response.data;\n        console.log(\"fetching\");\n        dispatch(taskActions.setTask(tasks));\n      } else {\n        throw new Error(\"Failed to fetch tasks from the API.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,WAAW,QAAO,cAAc;AAExC,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAO,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,6BAA6B,CAAC;MAC/D,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,KAAK,GAAGH,QAAQ,CAACI,IAAI;QAC3BC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;QACvBP,QAAQ,CAACF,WAAW,CAACU,OAAO,CAACJ,KAAK,CAAC,CAAC;MACtC,CAAC,MAAM;QACL,MAAM,IAAIK,KAAK,CAAC,qCAAqC,CAAC;MACxD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACpB;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}