{"ast":null,"code":"var _jsxFileName = \"/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TaskList from './components/Tasks/TaskList';\nimport TaskForm from './components/Tasks/TaskForm';\nimport MainHeader from './components/Layout/MainHeader';\nimport { uiActions } from './store/ui-slice';\nimport { taskActions } from './store/task-slice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  useEffect(() => {\n    // Fetch tasks from the API when the component mounts\n    const fetchTasks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tasks'); // Replace with the appropriate API endpoint\n        if (!response.ok) {\n          throw new Error('Failed to fetch tasks from the API.');\n        }\n        const data = await response.json();\n        dispatch(taskActions.setTasks(data)); // Dispatch an action to store the fetched tasks in the Redux store\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchTasks();\n  }, [dispatch]);\n  const showTaskForm = useSelector(state => state.ui.showTaskFormModal);\n  const dispatch = useDispatch();\n  const tasks = useSelector(state => state.task.tasks);\n  const showAddTaskFormHandler = () => {\n    dispatch(taskActions.hideTaskForm()); // Reset the task form state\n    dispatch(uiActions.showAddTaskForm()); // Show the add task form\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), showTaskForm && /*#__PURE__*/_jsxDEV(TaskForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskList, {\n        tasks: tasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showAddTaskFormHandler,\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oejBaSdvfdCG3jLTnxkXqxEgnVc=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Fragment","useEffect","useDispatch","useSelector","TaskList","TaskForm","MainHeader","uiActions","taskActions","jsxDEV","_jsxDEV","App","_s","fetchTasks","response","fetch","ok","Error","data","json","dispatch","setTasks","error","console","log","showTaskForm","state","ui","showTaskFormModal","tasks","task","showAddTaskFormHandler","hideTaskForm","showAddTaskForm","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/App.js"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TaskList from './components/Tasks/TaskList';\nimport TaskForm from './components/Tasks/TaskForm';\nimport MainHeader from './components/Layout/MainHeader';\nimport { uiActions } from './store/ui-slice';\nimport { taskActions } from './store/task-slice';\n\nfunction App() {\n\n  useEffect(() => {\n    // Fetch tasks from the API when the component mounts\n    const fetchTasks = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/tasks'); // Replace with the appropriate API endpoint\n        if (!response.ok) {\n          throw new Error('Failed to fetch tasks from the API.');\n        }\n        const data = await response.json();\n        dispatch(taskActions.setTasks(data)); // Dispatch an action to store the fetched tasks in the Redux store\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchTasks();\n  }, [dispatch]);\n\n  const showTaskForm = useSelector((state) => state.ui.showTaskFormModal);\n  const dispatch = useDispatch();\n  const tasks = useSelector((state) => state.task.tasks);\n\n  const showAddTaskFormHandler = () => {\n    dispatch(taskActions.hideTaskForm()); // Reset the task form state\n    dispatch(uiActions.showAddTaskForm()); // Show the add task form\n  };\n\n  return (\n    <Fragment>\n      <MainHeader />\n      {showTaskForm && <TaskForm />}\n      <main>\n        <TaskList tasks={tasks} /> {/* Pass the tasks to the TaskList component */}\n        <button onClick={showAddTaskFormHandler}>Add Task</button>\n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,UAAU,MAAM,gCAAgC;AACvD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEbX,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;QAC7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;QACxD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCC,QAAQ,CAACZ,WAAW,CAACa,QAAQ,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;MACxC,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF,CAAC;IAEDT,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACO,QAAQ,CAAC,CAAC;EAEd,MAAMK,YAAY,GAAGtB,WAAW,CAAEuB,KAAK,IAAKA,KAAK,CAACC,EAAE,CAACC,iBAAiB,CAAC;EACvE,MAAMR,QAAQ,GAAGlB,WAAW,CAAC,CAAC;EAC9B,MAAM2B,KAAK,GAAG1B,WAAW,CAAEuB,KAAK,IAAKA,KAAK,CAACI,IAAI,CAACD,KAAK,CAAC;EAEtD,MAAME,sBAAsB,GAAGA,CAAA,KAAM;IACnCX,QAAQ,CAACZ,WAAW,CAACwB,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;IACtCZ,QAAQ,CAACb,SAAS,CAAC0B,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;EACzC,CAAC;;EAED,oBACEvB,OAAA,CAACV,QAAQ;IAAAkC,QAAA,gBACPxB,OAAA,CAACJ,UAAU;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACbb,YAAY,iBAAIf,OAAA,CAACL,QAAQ;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7B5B,OAAA;MAAAwB,QAAA,gBACExB,OAAA,CAACN,QAAQ;QAACyB,KAAK,EAAEA;MAAM;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC,eAC3B5B,OAAA;QAAQ6B,OAAO,EAAER,sBAAuB;QAAAG,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEf;AAAC1B,EAAA,CAvCQD,GAAG;EAAA,QAoBWR,WAAW,EACfD,WAAW,EACdC,WAAW;AAAA;AAAAqC,EAAA,GAtBlB7B,GAAG;AAyCZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}