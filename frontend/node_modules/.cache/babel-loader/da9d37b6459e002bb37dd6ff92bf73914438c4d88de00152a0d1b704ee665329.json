{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport useFetchTasks, { fetchTasks } from \"./useFetchTasks\";\nimport { useDispatch } from \"react-redux\";\n// const initialTaskState = {\n//   tasks: [],\n//   //quantity: 0,\n// };\n\n// const taskSlice = createSlice({\n\n//   name: \"task\",\n//   initialState: initialTaskState,\n//   reducers: {\n//     addTask(state, action) {\n//       // action will pass an entire task object\n// \t\tconst task = action.payload;\n//       axios\n//         .post(\"http://localhost:3001/tasks\", {\n//           title: task.title,\n//           description: task.description,\n//           deadline: task.deadline,\n//         })\n//     },\n//     removeTask(state, action) {\n//       // action will pass the id of a task\n//       const id = action.payload;\n\n//       // double confirm deletion\n//       const proceed = window.confirm(\"Delete task?\");\n\n//       if (proceed) {\n//         state.tasks = state.tasks.filter((task) => task._id !== id);\n//         axios.delete(`http://localhost:3001/tasks/${id}`);\n//       }\n//     },\n//     editTask(state, action) {\n\n//       // action will pass the edited task\n//       console.log(action.payload);\n//       const { id, title, description, deadline, completed } = action.payload;\n\n//       //Make the PUT request to update the task on the backend\n//       axios.put(`http://localhost:3001/tasks/${id}`, {\n//         title,\n//         description,\n//         deadline,\n//         completed,\n//       });\n//       dispatchEvent(fetchTasks);\n//     },\n//     setTask(state, action) {\n// \t  action.payload.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n//       state.tasks = action.payload;\n//     },\n//   },\n// });\n\n// export const taskActions = taskSlice.actions;\n// export default taskSlice;\n\nexport function addTask(task) {\n  return async () => {\n    try {\n      await axios.post(\"http://localhost:3001/tasks\", {\n        title: task.title,\n        description: task.description,\n        deadline: task.deadline\n      });\n      fetchTasks();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\nexport function removeTask(id) {\n  return async () => {\n    try {\n      const proceed = window.confirm(\"Delete task?\");\n      if (proceed) {\n        await axios.delete(`http://localhost:3001/tasks/${id}`);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\nexport function editTask(id, updatedTask) {\n  return async () => {\n    try {\n      await axios.put(`http://localhost:3001/tasks/${id}`, updatedTask);\n      fetchTasks();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\nexport function setTask(tasks) {\n  tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n  return {\n    type: \"SET_TASK\",\n    payload: tasks\n  };\n}","map":{"version":3,"names":["createSlice","axios","useFetchTasks","fetchTasks","useDispatch","addTask","task","post","title","description","deadline","error","console","log","removeTask","id","proceed","window","confirm","delete","editTask","updatedTask","put","setTask","tasks","sort","a","b","Date","type","payload"],"sources":["/Users/matthewsamynathan/Documents/GitHub/CRISP-prac/frontend/src/store/task-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport useFetchTasks, { fetchTasks } from \"./useFetchTasks\";\nimport { useDispatch } from \"react-redux\";\n// const initialTaskState = {\n//   tasks: [],\n//   //quantity: 0,\n// };\n\n// const taskSlice = createSlice({\n\t\n//   name: \"task\",\n//   initialState: initialTaskState,\n//   reducers: {\n//     addTask(state, action) {\n//       // action will pass an entire task object\n// \t\tconst task = action.payload;\n//       axios\n//         .post(\"http://localhost:3001/tasks\", {\n//           title: task.title,\n//           description: task.description,\n//           deadline: task.deadline,\n//         })\n//     },\n//     removeTask(state, action) {\n//       // action will pass the id of a task\n//       const id = action.payload;\n\n//       // double confirm deletion\n//       const proceed = window.confirm(\"Delete task?\");\n\n//       if (proceed) {\n//         state.tasks = state.tasks.filter((task) => task._id !== id);\n//         axios.delete(`http://localhost:3001/tasks/${id}`);\n//       }\n//     },\n//     editTask(state, action) {\n\t\t\n//       // action will pass the edited task\n//       console.log(action.payload);\n//       const { id, title, description, deadline, completed } = action.payload;\n\t\n//       //Make the PUT request to update the task on the backend\n//       axios.put(`http://localhost:3001/tasks/${id}`, {\n//         title,\n//         description,\n//         deadline,\n//         completed,\n//       });\n//       dispatchEvent(fetchTasks);\n//     },\n//     setTask(state, action) {\n// \t  action.payload.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n//       state.tasks = action.payload;\n//     },\n//   },\n// });\n\n// export const taskActions = taskSlice.actions;\n// export default taskSlice;\n\n\n\nexport function addTask(task) {\n  return async () => {\n    try {\n      await axios.post(\"http://localhost:3001/tasks\", {\n        title: task.title,\n        description: task.description,\n        deadline: task.deadline,\n      });\n      fetchTasks()\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n\nexport function removeTask(id) {\n  return async () => {\n    try {\n      const proceed = window.confirm(\"Delete task?\");\n      if (proceed) {\n        await axios.delete(`http://localhost:3001/tasks/${id}`);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n\nexport function editTask(id, updatedTask) {\n  return async () => {\n    try {\n      await axios.put(`http://localhost:3001/tasks/${id}`, updatedTask);\n      fetchTasks();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n\nexport function setTask(tasks) {\n  tasks.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));\n  return {\n    type: \"SET_TASK\",\n    payload: tasks,\n  };\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,IAAIC,UAAU,QAAQ,iBAAiB;AAC3D,SAASC,WAAW,QAAQ,aAAa;AACzC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA,OAAO,SAASC,OAAOA,CAACC,IAAI,EAAE;EAC5B,OAAO,YAAY;IACjB,IAAI;MACF,MAAML,KAAK,CAACM,IAAI,CAAC,6BAA6B,EAAE;QAC9CC,KAAK,EAAEF,IAAI,CAACE,KAAK;QACjBC,WAAW,EAAEH,IAAI,CAACG,WAAW;QAC7BC,QAAQ,EAAEJ,IAAI,CAACI;MACjB,CAAC,CAAC;MACFP,UAAU,CAAC,CAAC;IACd,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;AACH;AAEA,OAAO,SAASG,UAAUA,CAACC,EAAE,EAAE;EAC7B,OAAO,YAAY;IACjB,IAAI;MACF,MAAMC,OAAO,GAAGC,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC;MAC9C,IAAIF,OAAO,EAAE;QACX,MAAMf,KAAK,CAACkB,MAAM,CAAE,+BAA8BJ,EAAG,EAAC,CAAC;MACzD;IACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;AACH;AAEA,OAAO,SAASS,QAAQA,CAACL,EAAE,EAAEM,WAAW,EAAE;EACxC,OAAO,YAAY;IACjB,IAAI;MACF,MAAMpB,KAAK,CAACqB,GAAG,CAAE,+BAA8BP,EAAG,EAAC,EAAEM,WAAW,CAAC;MACjElB,UAAU,CAAC,CAAC;IACd,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;AACH;AAEA,OAAO,SAASY,OAAOA,CAACC,KAAK,EAAE;EAC7BA,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAAChB,QAAQ,CAAC,GAAG,IAAIkB,IAAI,CAACD,CAAC,CAACjB,QAAQ,CAAC,CAAC;EACjE,OAAO;IACLmB,IAAI,EAAE,UAAU;IAChBC,OAAO,EAAEN;EACX,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}